(function() {var implementors = {
"elf_load":[["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.Bitness.html\" title=\"enum elf_load::data::Bitness\">Bitness</a>",1,["elf_load::data::Bitness"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.Endianess.html\" title=\"enum elf_load::data::Endianess\">Endianess</a>",1,["elf_load::data::Endianess"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.AbiType.html\" title=\"enum elf_load::data::AbiType\">AbiType</a>",1,["elf_load::data::AbiType"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.ObjectType.html\" title=\"enum elf_load::data::ObjectType\">ObjectType</a>",1,["elf_load::data::ObjectType"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.ASI.html\" title=\"enum elf_load::data::ASI\">ASI</a>",1,["elf_load::data::ASI"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.ProgramType.html\" title=\"enum elf_load::data::ProgramType\">ProgramType</a>",1,["elf_load::data::ProgramType"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.ProgramFlags.html\" title=\"enum elf_load::data::ProgramFlags\">ProgramFlags</a>",1,["elf_load::data::ProgramFlags"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.SectionType.html\" title=\"enum elf_load::data::SectionType\">SectionType</a>",1,["elf_load::data::SectionType"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/data/enum.SectionFlags.html\" title=\"enum elf_load::data::SectionFlags\">SectionFlags</a>",1,["elf_load::data::SectionFlags"]],["impl Freeze for <a class=\"struct\" href=\"elf_load/elf_header/struct.ElfHeader.html\" title=\"struct elf_load::elf_header::ElfHeader\">ElfHeader</a>",1,["elf_load::elf_header::ElfHeader"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/error/enum.ElfHeaderParseError.html\" title=\"enum elf_load::error::ElfHeaderParseError\">ElfHeaderParseError</a>",1,["elf_load::error::ElfHeaderParseError"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/error/enum.ProgramHeaderParseError.html\" title=\"enum elf_load::error::ProgramHeaderParseError\">ProgramHeaderParseError</a>",1,["elf_load::error::ProgramHeaderParseError"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/error/enum.SectionHeaderParseError.html\" title=\"enum elf_load::error::SectionHeaderParseError\">SectionHeaderParseError</a>",1,["elf_load::error::SectionHeaderParseError"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/error/enum.ElfParseError.html\" title=\"enum elf_load::error::ElfParseError\">ElfParseError</a>",1,["elf_load::error::ElfParseError"]],["impl Freeze for <a class=\"struct\" href=\"elf_load/program_header/struct.ProgramHeader.html\" title=\"struct elf_load::program_header::ProgramHeader\">ProgramHeader</a>",1,["elf_load::program_header::ProgramHeader"]],["impl Freeze for <a class=\"enum\" href=\"elf_load/section_header/enum.SectionName.html\" title=\"enum elf_load::section_header::SectionName\">SectionName</a>",1,["elf_load::section_header::SectionName"]],["impl Freeze for <a class=\"struct\" href=\"elf_load/section_header/struct.SectionHeader.html\" title=\"struct elf_load::section_header::SectionHeader\">SectionHeader</a>",1,["elf_load::section_header::SectionHeader"]],["impl Freeze for <a class=\"struct\" href=\"elf_load/struct.Elf.html\" title=\"struct elf_load::Elf\">Elf</a>",1,["elf_load::Elf"]],["impl Freeze for <a class=\"struct\" href=\"elf_load/struct.Address.html\" title=\"struct elf_load::Address\">Address</a>",1,["elf_load::Address"]]],
"meman":[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"meman/memory/struct.Memory.html\" title=\"struct meman::memory::Memory\">Memory</a>",1,["meman::memory::Memory"]],["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.2/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"meman/memory/enum.LoadError.html\" title=\"enum meman::memory::LoadError\">LoadError</a>",1,["meman::memory::LoadError"]]],
"riscv_vm":[["impl Freeze for <a class=\"enum\" href=\"riscv_vm/devices/memory_buffer/enum.MemoryBufferError.html\" title=\"enum riscv_vm::devices::memory_buffer::MemoryBufferError\">MemoryBufferError</a>",1,["riscv_vm::memory::memory_buffer::MemoryBufferError"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/devices/async_device/enum.AsyncDeviceUpdate.html\" title=\"enum riscv_vm::devices::async_device::AsyncDeviceUpdate\">AsyncDeviceUpdate</a>",1,["riscv_vm::devices::async_device::AsyncDeviceUpdate"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/devices/async_device/enum.AsyncDeviceUpdateResult.html\" title=\"enum riscv_vm::devices::async_device::AsyncDeviceUpdateResult\">AsyncDeviceUpdateResult</a>",1,["riscv_vm::devices::async_device::AsyncDeviceUpdateResult"]],["impl Freeze for <a class=\"struct\" href=\"riscv_vm/devices/simple_uart/struct.SimpleUart.html\" title=\"struct riscv_vm::devices::simple_uart::SimpleUart\">SimpleUart</a>",1,["riscv_vm::devices::simple_uart::SimpleUart"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/devices/enum.DeviceInitError.html\" title=\"enum riscv_vm::devices::DeviceInitError\">DeviceInitError</a>",1,["riscv_vm::devices::DeviceInitError"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/devices/enum.DeviceError.html\" title=\"enum riscv_vm::devices::DeviceError\">DeviceError</a>",1,["riscv_vm::devices::DeviceError"]],["impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"riscv_vm/devices/struct.DeviceMemHandle.html\" title=\"struct riscv_vm::devices::DeviceMemHandle\">DeviceMemHandle</a>&lt;'a&gt;",1,["riscv_vm::devices::DeviceMemHandle"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/trap/enum.Exception.html\" title=\"enum riscv_vm::trap::Exception\">Exception</a>",1,["riscv_vm::hart::trap::Exception"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/trap/enum.InterruptInternal.html\" title=\"enum riscv_vm::trap::InterruptInternal\">InterruptInternal</a>",1,["riscv_vm::hart::trap::InterruptInternal"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/trap/enum.Interrupt.html\" title=\"enum riscv_vm::trap::Interrupt\">Interrupt</a>",1,["riscv_vm::hart::trap::Interrupt"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/trap/enum.InterruptTarget.html\" title=\"enum riscv_vm::trap::InterruptTarget\">InterruptTarget</a>",1,["riscv_vm::hart::trap::InterruptTarget"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/trap/enum.TrapCause.html\" title=\"enum riscv_vm::trap::TrapCause\">TrapCause</a>",1,["riscv_vm::hart::trap::TrapCause"]],["impl Freeze for <a class=\"struct\" href=\"riscv_vm/struct.Address.html\" title=\"struct riscv_vm::Address\">Address</a>",1,["riscv_vm::memory::address::Address"]],["impl&lt;const MEM_SIZE: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.2/std/primitive.usize.html\">usize</a>&gt; Freeze for <a class=\"struct\" href=\"riscv_vm/vmstate/struct.VMStateBuilder.html\" title=\"struct riscv_vm::vmstate::VMStateBuilder\">VMStateBuilder</a>&lt;MEM_SIZE&gt;",1,["riscv_vm::vmstate::builder::VMStateBuilder"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/vmstate/enum.VMInitError.html\" title=\"enum riscv_vm::vmstate::VMInitError\">VMInitError</a>",1,["riscv_vm::vmstate::builder::VMInitError"]],["impl Freeze for <a class=\"struct\" href=\"riscv_vm/vmstate/struct.VMSettings.html\" title=\"struct riscv_vm::vmstate::VMSettings\">VMSettings</a>",1,["riscv_vm::vmstate::VMSettings"]],["impl Freeze for <a class=\"struct\" href=\"riscv_vm/vmstate/struct.VMState.html\" title=\"struct riscv_vm::vmstate::VMState\">VMState</a>",1,["riscv_vm::vmstate::VMState"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/vmstate/enum.KernelLoadError.html\" title=\"enum riscv_vm::vmstate::KernelLoadError\">KernelLoadError</a>",1,["riscv_vm::vmstate::KernelLoadError"]],["impl Freeze for <a class=\"enum\" href=\"riscv_vm/vmstate/enum.VMError.html\" title=\"enum riscv_vm::vmstate::VMError\">VMError</a>",1,["riscv_vm::vmstate::VMError"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()