var searchIndex = new Map(JSON.parse('[\
["elf_load",{"doc":"","t":"FKFNNNNONNCCNCNNNNNMMONNNCOCONNNNNNNPPPGPGPPPPPPPPPPPGPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPPPPPGGPPPPPPPPPPPPGGPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFOOOONNOONONNNNOOOOOOOONNNGPGPPPPPPPPPPPPPPPGPPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFONNNONNNNOOOOOONNNPFGPNNNNNNNNNNONNNNNNNOOOOOOOOONNNNNNNN","n":["Address","ByteRanges","Elf","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone_into","data","elf_header","eq","error","fmt","from","from","from","from_bytes","get_bytes","get_bytes_copy","header","into","into","populate_secion_names","program_header","program_headers","section_header","section_headers","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AIX","AMDx86_64","AROS","ASI","ATnT","AbiType","AdvancedLogicCorpTinyJ","Alloc","ArgonautRISC","Arm","Arm64bits","AxisCommunications32bit","B128","B32","B64","BerkeleyPacketFilter","Big","Bitness","Core","DensoNDR1","DigitalAlpha","DigitalEquipmentCorpPDP10","DigitalEquipmentCorpPDP11","DigitalVAX","Dyn","Dynamic","Dynamic","Dynsym","Element14_64bitDSP","Endianess","Exec","Exec","Execinstr","FenixOS","FiniArray","FreeBSD","FujitsuFR20","FujitsuMMA","GnuHurd","Group","Group","HPPARISC","Hash","HitachiH8300","HitachiH8300H","HitachiH8500","HitachiH8S","HpUx","IA64","IBMSPUSPC","IBMSystem370","IRIX","InfineonTechnologies32bit","InfoLink","InitArray","Intel80860","Intel80960","IntelMCU","Interp","LSILogic16bitDSP","LinkOrder","Linux","Little","Load","M68k","M88k","MCSTElbruse2k","MIPS","MIPSRS3000LE","Merge","MotorolaColfFire","MotorolaM68HC12","MotorolaMC68HC05","MotorolaMC68HC08","MotorolaMC68HC11","MotorolaMC68HC16","MotorolaRCE","MotorolaStar","NECV800","NetBSD","Nobits","NonStopKernel","None","None","Note","Note","NovellModesto","Null","Null","Num","NuxiCloudABI","ObjectType","OpenBSD","OpenVMS","OpenVOS","Os","Os","Os","OsNonconformin","PowerPC32","PowerPC64","PreinitArray","Proc","Proc","Progbits","ProgramFlags","ProgramType","RISCV","Read","Rel","Rel","Rela","S390","SPARC","SPARCV9","STMicroelectronicsST100","STMicroelectronicsST19_8bit","STMicroelectronicsST7_8bit","STMicroelectronicsST9_8_16bit","SectionFlags","SectionType","Shlib","SiemensFX66","SiemensPCP","SiemensTRiCore","SiliconGraphicsSVx","Solaris","SonyDSP","SonynCPUembeddedRISC","StanfordMIPSX","Strings","Strtab","SuperH","Symtab","SymtabShndx","SystemV","TMS320C6000","Tls","ToyotaME16","Tru64","WDC65C816","Write","Write","X86","ZilogZ80","bitand","bitand","bitor","bitor","bits","bits","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","not","not","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ElfHeader","abi_type","abi_ver","arch","bitness","borrow","borrow_mut","endianess","entry","eq","flags","fmt","from","from_bytes","into","obj_type","p_header","p_header_ecount","p_header_size","s_header","s_header_ecount","s_header_name_entry","s_header_size","try_from","try_into","type_id","ElfHeaderParseError","ElfHeaderParseError","ElfParseError","InvalidASI","InvalidAbi","InvalidBitness","InvalidEndianess","InvalidFlags","InvalidFlags","InvalidMagic","InvalidNameSecionType","InvalidObjType","InvalidProgramType","InvalidSectionName","InvalidSectionType","InvalidSize","InvalidVersion","InvalidVersionOrig","ProgramHeaderParseError","ProgramHeaderParseHeader","ReservedASI","SectionHeaderParseError","SectionHeaderParseError","SectionNotFound","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ProgramHeader","align","borrow","borrow_mut","eq","flags","fmt","from","from_bytes","into","program_type","seg_f_size","seg_m_size","seg_offset","seg_p_addr","seg_v_addr","try_from","try_into","type_id","Offset","SectionHeader","SectionName","String","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","flags","fmt","fmt","from","from","from_bytes","into","into","name","sec_addr","sec_align","sec_entry_size","sec_info","sec_link","sec_offset","sec_size","sec_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"elf_load"],[36,"elf_load::data"],[294,"elf_load::elf_header"],[320,"elf_load::error"],[385,"elf_load::program_header"],[404,"elf_load::section_header"],[443,"core::fmt"],[444,"core::fmt"],[445,"alloc::vec"],[446,"core::result"],[447,"core::any"],[448,"enumflags2::fallible"],[449,"enumflags2"],[450,"alloc::string"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Range 0xFE00..0xFEFF","range 0x60000000..0x6FFFFFFF","range 0x60000000..u32::MAX","","","","","Range 0xFF00..0xFFFF","range 0x70000000..0x7FFFFFFF","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Bytes may be longer than the header, header is assumed to â€¦","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,10,1,10,1,10,1,1,0,0,1,0,1,10,1,1,10,13,13,10,10,1,10,0,10,0,10,1,10,1,10,1,10,1,23,21,23,0,21,0,21,18,21,21,21,21,19,19,19,21,20,0,24,21,21,21,21,21,24,25,22,22,21,0,24,17,18,23,22,23,21,21,23,22,18,21,22,21,21,21,21,23,21,21,21,23,21,18,22,21,21,21,25,21,18,23,20,25,21,21,21,21,21,18,21,21,21,21,21,21,21,21,21,23,22,23,24,21,25,22,23,25,22,22,23,0,23,23,23,24,25,22,18,21,21,22,24,25,22,0,0,21,17,24,22,22,21,21,21,21,21,21,21,0,0,22,21,21,21,21,23,21,21,21,18,22,21,22,22,23,21,18,21,23,21,17,18,21,21,17,18,17,18,17,18,17,18,19,20,23,24,21,25,17,22,18,19,20,23,24,21,25,17,22,18,19,20,21,17,22,18,19,20,21,17,22,18,19,20,23,24,21,25,22,19,20,23,24,21,25,17,22,18,19,20,23,24,21,25,17,22,18,19,20,23,24,21,25,17,22,18,17,18,19,20,21,17,22,18,19,20,20,23,23,24,24,21,21,25,25,17,22,22,18,19,20,23,24,21,25,17,22,18,19,20,23,24,21,25,17,22,18,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,11,0,29,29,29,29,30,31,29,11,29,30,31,31,29,29,29,0,11,29,0,11,11,29,30,31,11,29,30,31,11,29,30,31,29,30,31,11,29,30,30,31,31,11,11,11,11,11,29,30,31,11,29,30,31,11,29,30,31,11,29,30,31,11,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,0,0,36,36,37,36,37,36,37,36,37,36,37,37,36,37,36,37,37,36,37,37,37,37,37,37,37,37,37,37,36,37,36,37,36,37,36,37],"f":"```{ce{}{}}000`{bb}{{ce}d{}{}}``{{bb}f}`{{bh}j}{cc{}}0{cb{{n{l}}}}{{{Ab{A`}}}{{Ah{AdAf}}}}{{Ajll}{{Al{A`}}}}{{Ajl}{{An{A`}}}}`99{Ad{{Ah{dAf}}}}````:{c{{Ah{e}}}{}{}}000{cB`{}}0`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{{BbBb}c{}}{{BdBd}c{}}10{Bbc{}}{Bdc{}}32{ce{}{}}00000000000000000{BfBf}{BhBh}{BjBj}{BbBb}{BlBl}{BdBd}{{ce}d{}{}}00000{{BfBf}f}{{BhBh}f}{{BnBn}f}{{C`C`}f}{{BjBj}f}{{CbCb}f}{{BlBl}f}{{Bfh}j}{{Bhh}j}{{Bnh}j}{{C`h}j}{{Bjh}j}{{Cbh}j}{{Bbh}j}{{Blh}j}{{Bdh}j}{cc{}}00000000{ce{}{}}00000000{Bbc{}}{Bdc{}}222222{c{{Ah{e}}}{}{}}0{A`{{Ah{Bhc}}}{}}{A`{{Ah{Bnc}}}{}}2{Cd{{Ah{C`c}}}{}}3{Cd{{Ah{Bjc}}}{}}44{Cf{{Ah{Cbc}}}{}}5{Cf{{Ah{Blc}}}{}}66666666666{cB`{}}00000000`````::``{{ChCh}f}`{{Chh}j}={{{Al{A`}}}{{Ah{ChCj}}}}=````````::3````````````````````````========{{CjCj}f}{{ClCl}f}{{CnCn}f}{{Cjh}j}{{Clh}j}{{Cnh}j}{{Afh}j}{cc{}}0{{{D`{c}}}ClDb}1{{{D`{c}}}CnDb}{CjAf}{CnAf}{DdAf}{ClAf}6{ce{}{}}000{c{{Ah{e}}}{}{}}0000000{cB`{}}000``22{{DfDf}f}`{{Dfh}j};{{{Al{A`}}ll}{{Ah{DfCl}}}}5``````443````5555{DhDh}{DjDj}{{ce}d{}{}}0{{DhDh}f}{{DjDj}f}`{{Dhh}j}{{Djh}j}{cc{}}0{{{Al{A`}}ll}{{Ah{DjCn}}}}>>`````````>>====<<","c":[],"p":[[5,"Address",0],[1,"unit"],[1,"bool"],[5,"Formatter",443],[8,"Result",443],[1,"u64"],[10,"Into",444],[1,"u8"],[5,"Vec",445],[5,"Elf",0],[6,"ElfParseError",320],[6,"Result",446],[10,"ByteRanges",0],[1,"slice"],[1,"array"],[5,"TypeId",447],[6,"ProgramFlags",36],[6,"SectionFlags",36],[6,"Bitness",36],[6,"Endianess",36],[6,"ASI",36],[6,"SectionType",36],[6,"AbiType",36],[6,"ObjectType",36],[6,"ProgramType",36],[1,"u16"],[1,"u32"],[5,"ElfHeader",294],[6,"ElfHeaderParseError",320],[6,"ProgramHeaderParseError",320],[6,"SectionHeaderParseError",320],[5,"FromBitsError",448],[10,"BitFlag",449],[5,"FromUtf8Error",450],[5,"ProgramHeader",385],[6,"SectionName",404],[5,"SectionHeader",404]],"b":[[364,"impl-From%3CElfHeaderParseError%3E-for-ElfParseError"],[365,"impl-From%3CSectionHeaderParseError%3E-for-ElfParseError"],[366,"impl-From%3CFromUtf8Error%3E-for-ElfParseError"],[367,"impl-From%3CProgramHeaderParseError%3E-for-ElfParseError"]]}],\
["meman",{"doc":"","t":"HCHPPGFPNNNNNNNNNNNOONNNNNN","n":["main","memory","print_fragement","EmptyFile","InvalidByte","LoadError","Memory","RangeMissing","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","from","into","into","load","mem","range","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"meman"],[3,"meman::memory"],[27,"core::fmt"],[28,"core::fmt"],[29,"alloc::string"],[30,"alloc::vec"],[31,"core::result"],[32,"core::any"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,4,4,0,0,4,10,4,10,4,4,10,4,4,10,4,10,10,10,10,4,10,4,10,4],"f":"{{}b}`{{{f{d}}}b}`````{ce{}{}}000{{hj}l}{cc{}}0{nh}33{{{Ab{A`}}}{{Af{Adh}}}}``{c{{Af{e}}}{}{}}000{cAh{}}0","c":[],"p":[[1,"unit"],[1,"u8"],[1,"slice"],[6,"LoadError",3],[5,"Formatter",27],[8,"Result",27],[5,"ParseIntError",28],[5,"String",29],[5,"Vec",30],[5,"Memory",3],[6,"Result",31],[5,"TypeId",32]],"b":[]}],\
["riscv_vm",{"doc":"","t":"FSSSSNNNNNNNNNNNCNNNNNNNNNNNNCNNNCKGGFKPTPPPPPNCNNNNNNNNNNNNNNCMNNNCMCNNNNNNNNNKGGPPPPPPNNNNNNNNNNNNNNMKMKGPPPPPNNNNNMMNNNMFNNNNNNNNNNNPPPPPGPPPPPPGPGGPPPPPPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPGPPPPGGFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONONNOONNNNONNNNNNNNNNNNNNNNNNNO","n":["Address","KB","MB","SUPPORTED_EXTENTIONS","UNSUPPORTED_EXENTIONS","add","add","add","add_assign","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","cmp","devices","eq","fmt","from","from","from","from","from","hash","into","partial_cmp","sub","to_owned","trap","try_from","try_into","type_id","vmstate","Device","DeviceError","DeviceInitError","DeviceMemHandle","DeviceObject","InsufficientMemory","MEM_SIZE","MemoryOverlap","MemoryOverlap","MemoryPoison","Other","UpdateError","add_memory_buffer","async_device","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","from","from","from","from","from","from","handled_device","init","into","into","into","memory_buffer","new","simple_uart","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AsyncDevice","AsyncDeviceUpdate","AsyncDeviceUpdateResult","Continue","Continue","Initial","TimeOut","TimeOut","TimeoutUntil","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","update","HandledDevice","update","MemoryBuffer","MemoryBufferError","OutOfBoundsRead","OutOfBoundsWrite","OutOfMemory","UnalignedRead","UnalignedWrite","borrow","borrow_mut","fmt","from","into","read_bytes","size","try_from","try_into","type_id","write_bytes","SimpleUart","borrow","borrow_mut","fmt","from","init","into","new","try_from","try_into","type_id","update","All","BreakPoint","EcallMMode","EcallSMode","EcallUMode","Exception","Exception","External","IllegalInstruction","InstructionAccessFault","InstructionAddressMisaligned","InstructionPageFault","Interrupt","Interrupt","InterruptInternal","InterruptTarget","LoadAccessFault","LoadAddressMisaligned","LoadPageFault","MSoftware","MachineExternal","MachineSoftware","MachineTimer","SSoftware","Single","StoreAccessFault","StoreAddressMisaligned","StorePageFault","SupervisorExternal","SupervisorSoftware","SupervisorTimer","Timer","TrapCause","bitand","bitand","bitor","bitor","bits","bits","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_code","get_code","into","into","into","into","into","not","not","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","DeviceError","DeviceInitError","ExecureError","FetchError","InvalidASI","InvalidBitness","InvalidElfKernel","InvalidEndianness","KernelLoadError","MBreak","MemoryError","NoDeviceMemory","StepUntilLimit","VMError","VMInitError","VMSettings","VMState","VMStateBuilder","add_async_device","add_interrupt_controllder","add_sync_device","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","default","default","dump_mem","enable_pmp","enable_virt_mem","fetch","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hart","into","into","into","into","into","into","load_elf_kernel","m_mode_swi_addr","m_mode_swi_enable","new","pmp_enable","print_mem_map","run","s_mode_swi_addr","s_mode_swi_enable","set_hart_count","step","step_all_until","step_hart_until","timer_addr","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","virt_mem_enable"],"q":[[0,"riscv_vm"],[34,"riscv_vm::devices"],[79,"riscv_vm::devices::async_device"],[103,"riscv_vm::devices::handled_device"],[105,"riscv_vm::devices::memory_buffer"],[123,"riscv_vm::devices::simple_uart"],[135,"riscv_vm::trap"],[233,"riscv_vm::vmstate"],[330,"core::cmp"],[331,"core::fmt"],[332,"core::fmt"],[333,"core::hash"],[334,"core::option"],[335,"core::result"],[336,"core::any"],[337,"std::sync::rwlock"],[338,"alloc::sync"],[339,"std::sync::poison"],[340,"core::error"],[341,"core::marker"],[342,"alloc::vec"],[343,"elf_load"]],"d":["","","","","","","","","","","","","","","","","Devices","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","The vmstate is the main  way to interact with the vm, is â€¦","Part one of the trifecta of traits that make up a device, â€¦","","","Gives devices access to memory during their â€¦","Part two of the trifecta of traits that make up a device. â€¦","","","","","","","","Register a memory region to live at <code>base</code>, the buffer is â€¦","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Part three of an async device, this trait defines the â€¦","Indicates the reason an <code>AsyncDevice</code>â€™s update function â€¦","Allows a async device to indicate when it wants its next â€¦","Immediate continue from last event","Immedtiately update","Initial device update, used to force the device to return â€¦","Requested timeout has ended","Wait for duration or an event whichever is earlier","Wait until instant or an event whichever is earlier","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Part three of a handled device, this trait defines the â€¦","The main way for the device to do logic, this function is â€¦","A buffer mapped to a specific address in memory, to which â€¦","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Itâ€™s not uart and probably breaks if you look at it â€¦","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An actual instance of a riscv vm, with memory, devices and â€¦","Used to setup a VM, create a builder using â€¦","Add an async devicem the actual device is specified via â€¦","DEPRECATED, Does nothing Interrupt Contoller will be built â€¦","Add a handled/sync devicem the actual device is specified â€¦","","","","","","","","","","","","","Build a vm from this builder, consumes the builder","","","","","","Enable pysical memory protections, the actual protection â€¦","Enable support for virual memory, allowes the guest to set â€¦","Attempt to fetch on a specific hart and return the decoded â€¦","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get an immutable refierence to a specific hart, if it â€¦","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load a kernel from an elf file and place it at 0x80000000 â€¦","","","Create a default instance of the builder with custom â€¦","","","Run the vm until it errors or forever, whichever happens â€¦","","","Set the number of harts this vm has.","Advance all cores one cycle and, if verbose, print the â€¦","Step all harts until its pc hits the given address or it â€¦","Step a specific hart until its pc hits the given address â€¦","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,18,26,18,20,18,18,20,15,0,15,18,20,15,18,20,18,20,15,18,18,20,20,20,0,25,15,18,20,0,26,0,15,18,20,15,18,20,15,18,20,0,0,0,28,29,28,28,29,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,27,0,30,0,0,31,31,31,31,31,31,31,31,31,31,19,19,31,31,31,19,0,36,36,36,36,36,36,36,36,36,36,36,40,37,37,37,37,0,41,39,37,37,37,37,0,41,0,0,37,37,37,39,38,38,38,39,40,37,37,37,38,38,38,39,0,37,38,37,38,37,38,37,38,37,38,39,40,41,37,38,39,40,41,37,38,39,37,38,39,38,38,39,37,38,39,40,41,37,38,39,40,41,37,38,37,38,39,40,41,37,38,38,37,38,39,37,38,39,40,41,37,38,39,40,41,37,38,39,40,41,47,44,47,47,46,46,47,46,0,47,47,47,47,0,0,0,0,0,42,42,42,43,42,44,45,46,47,43,42,44,45,46,47,42,45,45,42,45,43,42,42,43,43,42,44,45,46,47,43,42,44,44,45,46,47,47,43,43,42,44,45,46,47,43,45,45,42,45,43,43,45,45,42,43,43,43,45,45,43,42,44,45,46,47,43,42,44,45,46,47,43,42,44,45,46,47,45],"f":"`````{{bd}c{}}{{bb}c{}}{{bf}c{}}{{bd}h}{{bf}h}{{bb}h}{ce{}{}}0{bb}{{ce}h{}{}}{{bb}j}`{{bb}l}{{bn}A`}{cc{}}{Abb}{fb}{db}{Adb}{{bc}hAf};{{bb}{{Ah{j}}}}{{bb}c{}}=`{c{{Aj{e}}}{}{}}0{cAl{}}`````````````{{Anbc}{{Aj{{Bb{{B`{c}}}}Bd}}}Bf}`{ce{}{}}00000{{Bdn}A`}{{Bhn}A`}={{{Bj{c}}}Bd{}}>{Blc{}}?{cBh{BnC`}}`{{CbAn}{{Aj{hBd}}}}666`{{}Cd}`::::::999`````````7777{cc{}}088;;;;::{{CfCh}{{Aj{CjBh}}}}`{Cl{{Aj{hBh}}}}```````::{{Cnn}A`}3;{{BfbD`}{{Aj{{Dd{Db}}Cn}}}}{Bff}{c{{Aj{e}}}{}{}}0{cAl{}}{{Bf{Df{Db}}b}{{Aj{hCn}}}}`{ce{}{}}0{{Dhn}A`}:{{DhAn}{{Aj{hBd}}}}2{{}Dh}665{Dh{{Aj{hBh}}}}`````````````````````````````````{{DjDj}c{}}{{DlDl}c{}}10{Djc{}}{Dlc{}}328888888888{DjDj}{DlDl}{DnDn}{{ce}h{}{}}00{{DlDl}j}{{DlDl}l}{{DnDn}l}{{Djn}A`}{{Dln}A`}{{Dnn}A`}{{E`n}A`}{{Ebn}A`}{cc{}}0000{Djf}{Dlf}{ce{}{}}0000{Djc{}}{Dlc{}}{{DlDl}{{Ah{j}}}}333{c{{Aj{e}}}{}{}}000000000{cAl{}}0000``````````````````{EdEd}{{Edb}Ed}0777777777777{Ed{{Aj{EfEh}}}}{EjEj}{{ce}h{}{}}{{}Ed}{{}Ej}{Efh}77{{EfD`}{{Aj{``}}}}{{Efn}A`}{{Edn}A`}{{Ehn}A`}{{Ejn}A`}{{Eln}A`}{{Enn}A`}{cc{}}00{BdEh}111{BhEn}{{EfD`}{{Ah{`}}}}{ce{}{}}00000{{EfF`}{{Aj{hEn}}}}``{EjEd}`>{Ef{{Aj{hEn}}}}``{{Edf}Ed}{{Efl}{{Aj{hEn}}}}{{Efb}{{Aj{hEn}}}}{{EfD`b}{{Aj{hEn}}}}`7{c{{Aj{e}}}{}{}}00000000000{cAl{}}00000`","c":[252,271,301],"p":[[5,"Address",0],[1,"i32"],[1,"u64"],[1,"unit"],[6,"Ordering",330],[1,"bool"],[5,"Formatter",331],[8,"Result",331],[5,"Address",332],[1,"i64"],[10,"Hasher",333],[6,"Option",334],[6,"Result",335],[5,"TypeId",336],[5,"DeviceMemHandle",34],[5,"RwLock",337],[5,"Arc",338],[6,"DeviceInitError",34],[10,"MemoryBuffer",105],[6,"DeviceError",34],[5,"PoisonError",339],[1,"never"],[10,"Error",340],[10,"Send",341],[10,"DeviceObject",34],[10,"Device",34],[10,"AsyncDevice",79],[6,"AsyncDeviceUpdate",79],[6,"AsyncDeviceUpdateResult",79],[10,"HandledDevice",103],[6,"MemoryBufferError",105],[1,"usize"],[1,"u8"],[5,"Vec",342],[1,"slice"],[5,"SimpleUart",123],[6,"Exception",135],[6,"InterruptInternal",135],[6,"Interrupt",135],[6,"InterruptTarget",135],[6,"TrapCause",135],[5,"VMStateBuilder",233],[5,"VMState",233],[6,"VMInitError",233],[5,"VMSettings",233],[6,"KernelLoadError",233],[6,"VMError",233],[5,"Elf",332]],"b":[[5,"impl-Add%3Ci32%3E-for-Address"],[6,"impl-Add-for-Address"],[7,"impl-Add%3Cu64%3E-for-Address"],[8,"impl-AddAssign%3Ci32%3E-for-Address"],[9,"impl-AddAssign%3Cu64%3E-for-Address"],[10,"impl-AddAssign-for-Address"],[20,"impl-From%3CAddress%3E-for-Address"],[21,"impl-From%3Cu64%3E-for-Address"],[22,"impl-From%3Ci32%3E-for-Address"],[23,"impl-From%3Ci64%3E-for-Address"]]}],\
["riscv_vm_macros",{"doc":"","t":"Q","n":["inst"],"q":[[0,"riscv_vm_macros"]],"d":["Syntax:"],"i":[0],"f":"`","c":[],"p":[],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
